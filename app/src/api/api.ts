/* tslint:disable */
/* eslint-disable */
/**
 * PulsBackend
 * API Puls
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * Код ошибки
     * @type {string}
     * @memberof BadRequest
     */
    'error': string;
    /**
     * Сообщение для пользователя
     * @type {string}
     * @memberof BadRequest
     */
    'user_message': string;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CreatePostImageRequest
 */
export interface CreatePostImageRequest {
    /**
     * Описание изображения
     * @type {string}
     * @memberof CreatePostImageRequest
     */
    'post': string;
    /**
     * Размер изображения
     * @type {string}
     * @memberof CreatePostImageRequest
     */
    'size': string;
}
/**
 * 
 * @export
 * @interface CreatePostRequest
 */
export interface CreatePostRequest {
    /**
     * Дополнительные примечания
     * @type {string}
     * @memberof CreatePostRequest
     */
    'additions'?: string;
    /**
     * Длина поста
     * @type {number}
     * @memberof CreatePostRequest
     */
    'length': number;
    /**
     * Пример поста
     * @type {string}
     * @memberof CreatePostRequest
     */
    'post_sample'?: string;
    /**
     * Тема поста
     * @type {string}
     * @memberof CreatePostRequest
     */
    'post_topic': string;
    /**
     * Ответ на вопрос 1
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q1': string;
    /**
     * Ответ на вопрос 2
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q2': string;
    /**
     * Ответ на вопрос 3
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q3': string;
    /**
     * Ответ на вопрос 4
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q4': string;
    /**
     * Ответ на вопрос 5
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q5': string;
    /**
     * Ответ на вопрос 6
     * @type {string}
     * @memberof CreatePostRequest
     */
    'q6': string;
    /**
     * Тип поста
     * @type {string}
     * @memberof CreatePostRequest
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CreatePromptImageRequest
 */
export interface CreatePromptImageRequest {
    /**
     * Описание изображения
     * @type {string}
     * @memberof CreatePromptImageRequest
     */
    'prompt': string;
    /**
     * Размер изображения
     * @type {string}
     * @memberof CreatePromptImageRequest
     */
    'size': string;
}
/**
 * 
 * @export
 * @interface GetAuthGetUserId200Response
 */
export interface GetAuthGetUserId200Response {
    /**
     * Идентификатор пользователя
     * @type {number}
     * @memberof GetAuthGetUserId200Response
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface GetPostByIdRequest
 */
export interface GetPostByIdRequest {
    /**
     * id поста
     * @type {number}
     * @memberof GetPostByIdRequest
     */
    'post_id'?: number;
}
/**
 * 
 * @export
 * @interface GetProfileFromAnswersRequest
 */
export interface GetProfileFromAnswersRequest {
    /**
     * Пример поста
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'post_sample': string;
    /**
     * Ответ на вопрос 1
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q1': string;
    /**
     * Ответ на вопрос 2
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q2': string;
    /**
     * Ответ на вопрос 3
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q3': string;
    /**
     * Ответ на вопрос 4
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q4': string;
    /**
     * Ответ на вопрос 5
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q5': string;
    /**
     * Ответ на вопрос 6
     * @type {string}
     * @memberof GetProfileFromAnswersRequest
     */
    'q6': string;
}
/**
 * 
 * @export
 * @interface GetProfileFromUrlRequest
 */
export interface GetProfileFromUrlRequest {
    /**
     * Ссылка на профиль
     * @type {string}
     * @memberof GetProfileFromUrlRequest
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostAuthChangePassword500Response
 */
export interface PostAuthChangePassword500Response {
    /**
     * Описание ошибки
     * @type {string}
     * @memberof PostAuthChangePassword500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface PostAuthLogin200Response
 */
export interface PostAuthLogin200Response {
    /**
     * JWT токен для аутентификации
     * @type {string}
     * @memberof PostAuthLogin200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface PostContentCreateImagePost200Response
 */
export interface PostContentCreateImagePost200Response {
    /**
     * URL сгенерированного изображения
     * @type {string}
     * @memberof PostContentCreateImagePost200Response
     */
    'image_url'?: string;
}
/**
 * 
 * @export
 * @interface PostContentCreatePost200Response
 */
export interface PostContentCreatePost200Response {
    /**
     * Текст сгенерированного поста
     * @type {string}
     * @memberof PostContentCreatePost200Response
     */
    'post_text'?: string;
}
/**
 * 
 * @export
 * @interface PostContentSavePost200Response
 */
export interface PostContentSavePost200Response {
    /**
     * id сохраненного поста
     * @type {number}
     * @memberof PostContentSavePost200Response
     */
    'post_id'?: number;
}
/**
 * 
 * @export
 * @interface PostPaymentUsePromo200Response
 */
export interface PostPaymentUsePromo200Response {
    /**
     * Размер скидки в процентах
     * @type {number}
     * @memberof PostPaymentUsePromo200Response
     */
    'discount'?: number;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterRequest
     */
    'verification_code': number;
}
/**
 * 
 * @export
 * @interface SavePostRequest
 */
export interface SavePostRequest {
    /**
     * массив ссылок на изображения
     * @type {Array<string>}
     * @memberof SavePostRequest
     */
    'image_urls'?: Array<string>;
    /**
     * текст поста
     * @type {string}
     * @memberof SavePostRequest
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface SendEmailCodeRequest
 */
export interface SendEmailCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof SendEmailCodeRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SendLinkRequest
 */
export interface SendLinkRequest {
    /**
     * 
     * @type {string}
     * @memberof SendLinkRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UsePromoRequest
 */
export interface UsePromoRequest {
    /**
     * 
     * @type {string}
     * @memberof UsePromoRequest
     */
    'promocode': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает user_id пользователя. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение user_id по токенам
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthGetUserId: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/get_user_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает токен и новый пароль, проверяет токен и изменяет пароль пользователя. Если токен невалиден или пароль не соответствует требованиям, возвращается ошибка `400 Bad Request`. 
         * @summary Изменение пароля пользователя
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthChangePassword: async (changePasswordRequest: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('postAuthChangePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/auth/change_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает email и пароль пользователя, проверяет их и возвращает токен для аутентификации. Если email или пароль неверны, возвращается ошибка `400 Bad Request`. 
         * @summary Вход в систему
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('postAuthLogin', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает данные для регистрации, проверяет код подтверждения и возвращает токен. Если данные невалидны или код подтверждения неверен, возвращается ошибка `400 Bad Request`. 
         * @summary Регистрация нового пользователя
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('postAuthRegister', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает email адрес и отправляет на него ссылку для восстановления пароля. Если email невалиден или пользователь с таким email не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправка ссылки для восстановления пароля
         * @param {SendLinkRequest} sendLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthSendLink: async (sendLinkRequest: SendLinkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendLinkRequest' is not null or undefined
            assertParamExists('postAuthSendLink', 'sendLinkRequest', sendLinkRequest)
            const localVarPath = `/auth/send_link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendLinkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает email адрес, валидирует его и отправляет код подтверждения. Если email невалиден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправить код подтверждения на email
         * @param {SendEmailCodeRequest} sendEmailCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendEmailCode: async (sendEmailCodeRequest: SendEmailCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailCodeRequest' is not null or undefined
            assertParamExists('postSendEmailCode', 'sendEmailCodeRequest', sendEmailCodeRequest)
            const localVarPath = `/send_email_code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает user_id пользователя. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение user_id по токенам
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthGetUserId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuthGetUserId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthGetUserId(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getAuthGetUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает токен и новый пароль, проверяет токен и изменяет пароль пользователя. Если токен невалиден или пароль не соответствует требованиям, возвращается ошибка `400 Bad Request`. 
         * @summary Изменение пароля пользователя
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthChangePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthChangePassword(changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postAuthChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает email и пароль пользователя, проверяет их и возвращает токен для аутентификации. Если email или пароль неверны, возвращается ошибка `400 Bad Request`. 
         * @summary Вход в систему
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postAuthLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает данные для регистрации, проверяет код подтверждения и возвращает токен. Если данные невалидны или код подтверждения неверен, возвращается ошибка `400 Bad Request`. 
         * @summary Регистрация нового пользователя
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postAuthRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает email адрес и отправляет на него ссылку для восстановления пароля. Если email невалиден или пользователь с таким email не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправка ссылки для восстановления пароля
         * @param {SendLinkRequest} sendLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthSendLink(sendLinkRequest: SendLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthSendLink(sendLinkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postAuthSendLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает email адрес, валидирует его и отправляет код подтверждения. Если email невалиден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправить код подтверждения на email
         * @param {SendEmailCodeRequest} sendEmailCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSendEmailCode(sendEmailCodeRequest: SendEmailCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSendEmailCode(sendEmailCodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postSendEmailCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает user_id пользователя. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение user_id по токенам
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthGetUserId(options?: RawAxiosRequestConfig): AxiosPromise<GetAuthGetUserId200Response> {
            return localVarFp.getAuthGetUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает токен и новый пароль, проверяет токен и изменяет пароль пользователя. Если токен невалиден или пароль не соответствует требованиям, возвращается ошибка `400 Bad Request`. 
         * @summary Изменение пароля пользователя
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthChangePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAuthChangePassword(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает email и пароль пользователя, проверяет их и возвращает токен для аутентификации. Если email или пароль неверны, возвращается ошибка `400 Bad Request`. 
         * @summary Вход в систему
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает данные для регистрации, проверяет код подтверждения и возвращает токен. Если данные невалидны или код подтверждения неверен, возвращается ошибка `400 Bad Request`. 
         * @summary Регистрация нового пользователя
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthRegister(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает email адрес и отправляет на него ссылку для восстановления пароля. Если email невалиден или пользователь с таким email не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправка ссылки для восстановления пароля
         * @param {SendLinkRequest} sendLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthSendLink(sendLinkRequest: SendLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAuthSendLink(sendLinkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает email адрес, валидирует его и отправляет код подтверждения. Если email невалиден, возвращается ошибка `400 Bad Request`. 
         * @summary Отправить код подтверждения на email
         * @param {SendEmailCodeRequest} sendEmailCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendEmailCode(sendEmailCodeRequest: SendEmailCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postSendEmailCode(sendEmailCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает user_id пользователя. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получение user_id по токенам
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getAuthGetUserId(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getAuthGetUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает токен и новый пароль, проверяет токен и изменяет пароль пользователя. Если токен невалиден или пароль не соответствует требованиям, возвращается ошибка `400 Bad Request`. 
     * @summary Изменение пароля пользователя
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthChangePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthChangePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает email и пароль пользователя, проверяет их и возвращает токен для аутентификации. Если email или пароль неверны, возвращается ошибка `400 Bad Request`. 
     * @summary Вход в систему
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает данные для регистрации, проверяет код подтверждения и возвращает токен. Если данные невалидны или код подтверждения неверен, возвращается ошибка `400 Bad Request`. 
     * @summary Регистрация нового пользователя
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthRegister(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthRegister(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает email адрес и отправляет на него ссылку для восстановления пароля. Если email невалиден или пользователь с таким email не найден, возвращается ошибка `400 Bad Request`. 
     * @summary Отправка ссылки для восстановления пароля
     * @param {SendLinkRequest} sendLinkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthSendLink(sendLinkRequest: SendLinkRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthSendLink(sendLinkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает email адрес, валидирует его и отправляет код подтверждения. Если email невалиден, возвращается ошибка `400 Bad Request`. 
     * @summary Отправить код подтверждения на email
     * @param {SendEmailCodeRequest} sendEmailCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postSendEmailCode(sendEmailCodeRequest: SendEmailCodeRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postSendEmailCode(sendEmailCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Роут принимает id юзера и возвращает его посты. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение постов пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentGetUsersPosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/get_users_posts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает название поста и размер желаемого изображения. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePostImageRequest} createPostImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreateImagePost: async (createPostImageRequest: CreatePostImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPostImageRequest' is not null or undefined
            assertParamExists('postContentCreateImagePost', 'createPostImageRequest', createPostImageRequest)
            const localVarPath = `/content/create_image_post/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает описание изображения (prompt) и его размер. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePromptImageRequest} createPromptImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreateImagePrompt: async (createPromptImageRequest: CreatePromptImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPromptImageRequest' is not null or undefined
            assertParamExists('postContentCreateImagePrompt', 'createPromptImageRequest', createPromptImageRequest)
            const localVarPath = `/content/create_image_prompt/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPromptImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает ответы на вопросы, параметры длины, тему поста, дополнительные примечания и тип поста. На основе этих данных генерируется текст поста. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание поста на основе ответов
         * @param {CreatePostRequest} createPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreatePost: async (createPostRequest: CreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPostRequest' is not null or undefined
            assertParamExists('postContentCreatePost', 'createPostRequest', createPostRequest)
            const localVarPath = `/content/create_post/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает id поста и возвращает информацию о нем Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение информации о посте по id
         * @param {GetPostByIdRequest} getPostByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentGetPostById: async (getPostByIdRequest: GetPostByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getPostByIdRequest' is not null or undefined
            assertParamExists('postContentGetPostById', 'getPostByIdRequest', getPostByIdRequest)
            const localVarPath = `/content/get_post_by_id/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPostByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает текст поста и ссылку на изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Сохранение поста
         * @param {SavePostRequest} savePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentSavePost: async (savePostRequest: SavePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savePostRequest' is not null or undefined
            assertParamExists('postContentSavePost', 'savePostRequest', savePostRequest)
            const localVarPath = `/content/save_post/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Роут принимает id юзера и возвращает его посты. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение постов пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentGetUsersPosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentGetUsersPosts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.getContentGetUsersPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает название поста и размер желаемого изображения. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePostImageRequest} createPostImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentCreateImagePost(createPostImageRequest: CreatePostImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentCreateImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentCreateImagePost(createPostImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.postContentCreateImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает описание изображения (prompt) и его размер. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePromptImageRequest} createPromptImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentCreateImagePrompt(createPromptImageRequest: CreatePromptImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentCreateImagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentCreateImagePrompt(createPromptImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.postContentCreateImagePrompt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает ответы на вопросы, параметры длины, тему поста, дополнительные примечания и тип поста. На основе этих данных генерируется текст поста. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание поста на основе ответов
         * @param {CreatePostRequest} createPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentCreatePost(createPostRequest: CreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentCreatePost(createPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.postContentCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает id поста и возвращает информацию о нем Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение информации о посте по id
         * @param {GetPostByIdRequest} getPostByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentGetPostById(getPostByIdRequest: GetPostByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavePostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentGetPostById(getPostByIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.postContentGetPostById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает текст поста и ссылку на изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Сохранение поста
         * @param {SavePostRequest} savePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentSavePost(savePostRequest: SavePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentSavePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentSavePost(savePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.postContentSavePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * Роут принимает id юзера и возвращает его посты. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение постов пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentGetUsersPosts(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getContentGetUsersPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает название поста и размер желаемого изображения. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePostImageRequest} createPostImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreateImagePost(createPostImageRequest: CreatePostImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostContentCreateImagePost200Response> {
            return localVarFp.postContentCreateImagePost(createPostImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает описание изображения (prompt) и его размер. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание изображения на основе описания
         * @param {CreatePromptImageRequest} createPromptImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreateImagePrompt(createPromptImageRequest: CreatePromptImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostContentCreateImagePost200Response> {
            return localVarFp.postContentCreateImagePrompt(createPromptImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает ответы на вопросы, параметры длины, тему поста, дополнительные примечания и тип поста. На основе этих данных генерируется текст поста. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Создание поста на основе ответов
         * @param {CreatePostRequest} createPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentCreatePost(createPostRequest: CreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostContentCreatePost200Response> {
            return localVarFp.postContentCreatePost(createPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает id поста и возвращает информацию о нем Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение информации о посте по id
         * @param {GetPostByIdRequest} getPostByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentGetPostById(getPostByIdRequest: GetPostByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SavePostRequest> {
            return localVarFp.postContentGetPostById(getPostByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает текст поста и ссылку на изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Сохранение поста
         * @param {SavePostRequest} savePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentSavePost(savePostRequest: SavePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostContentSavePost200Response> {
            return localVarFp.postContentSavePost(savePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * Роут принимает id юзера и возвращает его посты. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получение постов пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public getContentGetUsersPosts(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).getContentGetUsersPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает название поста и размер желаемого изображения. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Создание изображения на основе описания
     * @param {CreatePostImageRequest} createPostImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public postContentCreateImagePost(createPostImageRequest: CreatePostImageRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).postContentCreateImagePost(createPostImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает описание изображения (prompt) и его размер. На основе этих данных генерируется изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Создание изображения на основе описания
     * @param {CreatePromptImageRequest} createPromptImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public postContentCreateImagePrompt(createPromptImageRequest: CreatePromptImageRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).postContentCreateImagePrompt(createPromptImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает ответы на вопросы, параметры длины, тему поста, дополнительные примечания и тип поста. На основе этих данных генерируется текст поста. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Создание поста на основе ответов
     * @param {CreatePostRequest} createPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public postContentCreatePost(createPostRequest: CreatePostRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).postContentCreatePost(createPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает id поста и возвращает информацию о нем Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получение информации о посте по id
     * @param {GetPostByIdRequest} getPostByIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public postContentGetPostById(getPostByIdRequest: GetPostByIdRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).postContentGetPostById(getPostByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает текст поста и ссылку на изображение. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Сохранение поста
     * @param {SavePostRequest} savePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public postContentSavePost(savePostRequest: SavePostRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).postContentSavePost(savePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomizeApi - axios parameter creator
 * @export
 */
export const CustomizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает ответы пользователя на вопросы. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizeGetUserAnswers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize/get_user_answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает ответы на вопросы и возвращает сгенерированный профиль. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль на основе ответов
         * @param {GetProfileFromAnswersRequest} getProfileFromAnswersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomizeGetProfileFromAnswers: async (getProfileFromAnswersRequest: GetProfileFromAnswersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getProfileFromAnswersRequest' is not null or undefined
            assertParamExists('postCustomizeGetProfileFromAnswers', 'getProfileFromAnswersRequest', getProfileFromAnswersRequest)
            const localVarPath = `/customize/get_profile_from_answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getProfileFromAnswersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Роут принимает ссылку на профиль и возвращает данные профиля. Если ссылка невалидна или профиль не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль по ссылке
         * @param {GetProfileFromUrlRequest} getProfileFromUrlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomizeGetProfileFromUrl: async (getProfileFromUrlRequest: GetProfileFromUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getProfileFromUrlRequest' is not null or undefined
            assertParamExists('postCustomizeGetProfileFromUrl', 'getProfileFromUrlRequest', getProfileFromUrlRequest)
            const localVarPath = `/customize/get_profile_from_url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getProfileFromUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomizeApi - functional programming interface
 * @export
 */
export const CustomizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomizeApiAxiosParamCreator(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает ответы пользователя на вопросы. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomizeGetUserAnswers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfileFromAnswersRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizeGetUserAnswers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomizeApi.getCustomizeGetUserAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает ответы на вопросы и возвращает сгенерированный профиль. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль на основе ответов
         * @param {GetProfileFromAnswersRequest} getProfileFromAnswersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest: GetProfileFromAnswersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomizeApi.postCustomizeGetProfileFromAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Роут принимает ссылку на профиль и возвращает данные профиля. Если ссылка невалидна или профиль не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль по ссылке
         * @param {GetProfileFromUrlRequest} getProfileFromUrlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomizeGetProfileFromUrl(getProfileFromUrlRequest: GetProfileFromUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomizeGetProfileFromUrl(getProfileFromUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomizeApi.postCustomizeGetProfileFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomizeApi - factory interface
 * @export
 */
export const CustomizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomizeApiFp(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает ответы пользователя на вопросы. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizeGetUserAnswers(options?: RawAxiosRequestConfig): AxiosPromise<GetProfileFromAnswersRequest> {
            return localVarFp.getCustomizeGetUserAnswers(options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает ответы на вопросы и возвращает сгенерированный профиль. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль на основе ответов
         * @param {GetProfileFromAnswersRequest} getProfileFromAnswersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest: GetProfileFromAnswersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Роут принимает ссылку на профиль и возвращает данные профиля. Если ссылка невалидна или профиль не найден, возвращается ошибка `400 Bad Request`. 
         * @summary Получить профиль по ссылке
         * @param {GetProfileFromUrlRequest} getProfileFromUrlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomizeGetProfileFromUrl(getProfileFromUrlRequest: GetProfileFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCustomizeGetProfileFromUrl(getProfileFromUrlRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomizeApi - object-oriented interface
 * @export
 * @class CustomizeApi
 * @extends {BaseAPI}
 */
export class CustomizeApi extends BaseAPI {
    /**
     * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает ответы пользователя на вопросы. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получение ответов пользователя на вопросы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizeApi
     */
    public getCustomizeGetUserAnswers(options?: RawAxiosRequestConfig) {
        return CustomizeApiFp(this.configuration).getCustomizeGetUserAnswers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает ответы на вопросы и возвращает сгенерированный профиль. Если данные невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получить профиль на основе ответов
     * @param {GetProfileFromAnswersRequest} getProfileFromAnswersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizeApi
     */
    public postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest: GetProfileFromAnswersRequest, options?: RawAxiosRequestConfig) {
        return CustomizeApiFp(this.configuration).postCustomizeGetProfileFromAnswers(getProfileFromAnswersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Роут принимает ссылку на профиль и возвращает данные профиля. Если ссылка невалидна или профиль не найден, возвращается ошибка `400 Bad Request`. 
     * @summary Получить профиль по ссылке
     * @param {GetProfileFromUrlRequest} getProfileFromUrlRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizeApi
     */
    public postCustomizeGetProfileFromUrl(getProfileFromUrlRequest: GetProfileFromUrlRequest, options?: RawAxiosRequestConfig) {
        return CustomizeApiFp(this.configuration).postCustomizeGetProfileFromUrl(getProfileFromUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Роут принимает промокод в теле запроса и access_token, refresh_token в заголовках. Если промокод валиден, он применяется к текущему заказу пользователя. Если промокод невалиден или токены недействительны, возвращается ошибка `400 Bad Request`. 
         * @summary Использование промокода
         * @param {UsePromoRequest} usePromoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentUsePromo: async (usePromoRequest: UsePromoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usePromoRequest' is not null or undefined
            assertParamExists('postPaymentUsePromo', 'usePromoRequest', usePromoRequest)
            const localVarPath = `/payment/use_promo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usePromoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Роут принимает промокод в теле запроса и access_token, refresh_token в заголовках. Если промокод валиден, он применяется к текущему заказу пользователя. Если промокод невалиден или токены недействительны, возвращается ошибка `400 Bad Request`. 
         * @summary Использование промокода
         * @param {UsePromoRequest} usePromoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentUsePromo(usePromoRequest: UsePromoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPaymentUsePromo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentUsePromo(usePromoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentApi.postPaymentUsePromo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * Роут принимает промокод в теле запроса и access_token, refresh_token в заголовках. Если промокод валиден, он применяется к текущему заказу пользователя. Если промокод невалиден или токены недействительны, возвращается ошибка `400 Bad Request`. 
         * @summary Использование промокода
         * @param {UsePromoRequest} usePromoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentUsePromo(usePromoRequest: UsePromoRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostPaymentUsePromo200Response> {
            return localVarFp.postPaymentUsePromo(usePromoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * Роут принимает промокод в теле запроса и access_token, refresh_token в заголовках. Если промокод валиден, он применяется к текущему заказу пользователя. Если промокод невалиден или токены недействительны, возвращается ошибка `400 Bad Request`. 
     * @summary Использование промокода
     * @param {UsePromoRequest} usePromoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public postPaymentUsePromo(usePromoRequest: UsePromoRequest, options?: RawAxiosRequestConfig) {
        return PaymentApiFp(this.configuration).postPaymentUsePromo(usePromoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает всю информацию о пользователе. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileGetAllUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/get_all_user_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает всю информацию о пользователе. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileGetAllUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileGetAllUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getProfileGetAllUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает всю информацию о пользователе. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
         * @summary Получение ответов пользователя на вопросы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileGetAllUserInfo(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProfileGetAllUserInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Роут принимает access_token и refresh_token в заголовках, проверяет их и возвращает всю информацию о пользователе. Если токены невалидны, возвращается ошибка `400 Bad Request`. 
     * @summary Получение ответов пользователя на вопросы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getProfileGetAllUserInfo(options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getProfileGetAllUserInfo(options).then((request) => request(this.axios, this.basePath));
    }
}



